// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/odds.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OddsService_CreateOdds_FullMethodName = "/odds.OddsService/CreateOdds"
	OddsService_ReadOdds_FullMethodName   = "/odds.OddsService/ReadOdds"
	OddsService_UpdateOdds_FullMethodName = "/odds.OddsService/UpdateOdds"
	OddsService_DeleteOdds_FullMethodName = "/odds.OddsService/DeleteOdds"
)

// OddsServiceClient is the client API for OddsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OddsServiceClient interface {
	CreateOdds(ctx context.Context, in *CreateOddsRequest, opts ...grpc.CallOption) (*CreateOddsResponse, error)
	ReadOdds(ctx context.Context, in *ReadOddsRequest, opts ...grpc.CallOption) (*ReadOddsResponse, error)
	UpdateOdds(ctx context.Context, in *UpdateOddsRequest, opts ...grpc.CallOption) (*UpdateOddsResponse, error)
	DeleteOdds(ctx context.Context, in *DeleteOddsRequest, opts ...grpc.CallOption) (*DeleteOddsResponse, error)
}

type oddsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOddsServiceClient(cc grpc.ClientConnInterface) OddsServiceClient {
	return &oddsServiceClient{cc}
}

func (c *oddsServiceClient) CreateOdds(ctx context.Context, in *CreateOddsRequest, opts ...grpc.CallOption) (*CreateOddsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOddsResponse)
	err := c.cc.Invoke(ctx, OddsService_CreateOdds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oddsServiceClient) ReadOdds(ctx context.Context, in *ReadOddsRequest, opts ...grpc.CallOption) (*ReadOddsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadOddsResponse)
	err := c.cc.Invoke(ctx, OddsService_ReadOdds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oddsServiceClient) UpdateOdds(ctx context.Context, in *UpdateOddsRequest, opts ...grpc.CallOption) (*UpdateOddsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOddsResponse)
	err := c.cc.Invoke(ctx, OddsService_UpdateOdds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oddsServiceClient) DeleteOdds(ctx context.Context, in *DeleteOddsRequest, opts ...grpc.CallOption) (*DeleteOddsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOddsResponse)
	err := c.cc.Invoke(ctx, OddsService_DeleteOdds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OddsServiceServer is the server API for OddsService service.
// All implementations must embed UnimplementedOddsServiceServer
// for forward compatibility.
type OddsServiceServer interface {
	CreateOdds(context.Context, *CreateOddsRequest) (*CreateOddsResponse, error)
	ReadOdds(context.Context, *ReadOddsRequest) (*ReadOddsResponse, error)
	UpdateOdds(context.Context, *UpdateOddsRequest) (*UpdateOddsResponse, error)
	DeleteOdds(context.Context, *DeleteOddsRequest) (*DeleteOddsResponse, error)
	mustEmbedUnimplementedOddsServiceServer()
}

// UnimplementedOddsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOddsServiceServer struct{}

func (UnimplementedOddsServiceServer) CreateOdds(context.Context, *CreateOddsRequest) (*CreateOddsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOdds not implemented")
}
func (UnimplementedOddsServiceServer) ReadOdds(context.Context, *ReadOddsRequest) (*ReadOddsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOdds not implemented")
}
func (UnimplementedOddsServiceServer) UpdateOdds(context.Context, *UpdateOddsRequest) (*UpdateOddsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOdds not implemented")
}
func (UnimplementedOddsServiceServer) DeleteOdds(context.Context, *DeleteOddsRequest) (*DeleteOddsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOdds not implemented")
}
func (UnimplementedOddsServiceServer) mustEmbedUnimplementedOddsServiceServer() {}
func (UnimplementedOddsServiceServer) testEmbeddedByValue()                     {}

// UnsafeOddsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OddsServiceServer will
// result in compilation errors.
type UnsafeOddsServiceServer interface {
	mustEmbedUnimplementedOddsServiceServer()
}

func RegisterOddsServiceServer(s grpc.ServiceRegistrar, srv OddsServiceServer) {
	// If the following call pancis, it indicates UnimplementedOddsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OddsService_ServiceDesc, srv)
}

func _OddsService_CreateOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OddsServiceServer).CreateOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OddsService_CreateOdds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OddsServiceServer).CreateOdds(ctx, req.(*CreateOddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OddsService_ReadOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OddsServiceServer).ReadOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OddsService_ReadOdds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OddsServiceServer).ReadOdds(ctx, req.(*ReadOddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OddsService_UpdateOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OddsServiceServer).UpdateOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OddsService_UpdateOdds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OddsServiceServer).UpdateOdds(ctx, req.(*UpdateOddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OddsService_DeleteOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OddsServiceServer).DeleteOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OddsService_DeleteOdds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OddsServiceServer).DeleteOdds(ctx, req.(*DeleteOddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OddsService_ServiceDesc is the grpc.ServiceDesc for OddsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OddsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odds.OddsService",
	HandlerType: (*OddsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOdds",
			Handler:    _OddsService_CreateOdds_Handler,
		},
		{
			MethodName: "ReadOdds",
			Handler:    _OddsService_ReadOdds_Handler,
		},
		{
			MethodName: "UpdateOdds",
			Handler:    _OddsService_UpdateOdds_Handler,
		},
		{
			MethodName: "DeleteOdds",
			Handler:    _OddsService_DeleteOdds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/odds.proto",
}
